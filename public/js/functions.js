import{appointmentObj,editing}from"./variables.js";import{Notification}from"./classes/Notification.js";import{AdminAppointments}from"./classes/AdminAppointments.js";import{formAppointment,formBtn,inputPatientName,inputOwnerName,inputContactEmail,inputRegistrationDate,inputSymptoms}from"./selectors.js";const appointments=new AdminAppointments;export function appointmentData(t){t.preventDefault(),appointmentObj[t.target.name]=t.target.value}export function sendAppointment(t){if(t.preventDefault(),Object.values(appointmentObj).some(t=>""===t.trim()))new Notification({message:"Todos los campos son obligatorios",type:"error"});else{if(editing.value){const t=dataBase.transaction(["appointments"],"readwrite");t.objectStore("appointments").put(appointmentObj);t.oncomplete=()=>{appointments.editAppointment({...appointmentObj}),new Notification({message:"Cita editada correctamente",type:"success"})}}else{const t=dataBase.transaction(["appointments"],"readwrite");t.objectStore("appointments").add(appointmentObj);t.oncomplete=()=>{appointments.addAppointment({...appointmentObj}),new Notification({message:"Cita agregada correctamente",type:"success"})},t.onerror=()=>{new Notification({message:"Error al agregar la cita",type:"error"})}}formAppointment.reset(),resetAppointmentObj(),formBtn.value="Registrar paciente",editing.value=!1}}export function resetAppointmentObj(){Object.assign(appointmentObj,{id:generateId(),patient_name:"",owner_name:"",contact_email:"",registration_date:"",symptoms:""})}export function generateId(){return Math.random().toString(36).substring(2)+Date.now()}export function loadEdition(t){Object.assign(appointmentObj,t),inputPatientName.value=t.patient_name,inputOwnerName.value=t.owner_name,inputContactEmail.value=t.contact_email,inputRegistrationDate.value=t.registration_date,inputSymptoms.value=t.symptoms,editing.value=!0,formBtn.value="Guardar cambios"}export let dataBase;export function createDB(){const t=window.indexedDB.open("appointments",1);t.onerror=()=>{console.error("Error al crear la base de datos")},t.onsuccess=()=>{dataBase=t.result,appointments.showAppointments()},t.onupgradeneeded=t=>{const e=t.target.result.createObjectStore("appointments",{keyPath:"id",autoIncrement:!0});e.createIndex("patient_name","patient_name",{unique:!1}),e.createIndex("owner_name","owner_name",{unique:!1}),e.createIndex("contact_email","contact_email",{unique:!1}),e.createIndex("registration_date","registration_date",{unique:!1}),e.createIndex("symptoms","symptoms",{unique:!1}),e.createIndex("id","id",{unique:!0})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
